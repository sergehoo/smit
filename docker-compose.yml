networks:
  smitci_network:
    driver: bridge
  proxy:
    external: true   # réseau Traefik (uniquement pour smitweb/adminer)

volumes:
  pgdata:
  static_volume:
  media_volume:
  torch_cache:

services:
  smitDB:
    image: postgis/postgis:16-3.4
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PG_DATA: /data
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [smitci_network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--appendfsync", "everysec", "--save", "900 1"]
    networks: [smitci_network]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h 127.0.0.1 ping | grep PONG >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  smitweb:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      gunicorn smitci.wsgi:application
      --bind 0.0.0.0:8000
      --workers 2 --threads 2
      --timeout 60
      --log-level warning
    env_file: [.env]
    environment:
      RUN_MIGRATIONS: "1"
      RUN_COLLECTSTATIC: "1"
    volumes:
      - .:/smitci-app
      - static_volume:/smitci-app/static
      - media_volume:/smitci-app/media
      - torch_cache:/root/.cache/torch
    depends_on:
      smitDB:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks: [smitci_network, proxy]
    # Healthcheck SANS curl (python inline)
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://127.0.0.1:8000/healthz', timeout=2).status==200 else sys.exit(1)\""
        ]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 40s
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy

      # Router HTTPS principal
      - traefik.http.routers.smitci.rule=Host(`smitci.com`)
      - traefik.http.routers.smitci.entrypoints=websecure
      - traefik.http.routers.smitci.tls=true
      - traefik.http.routers.smitci.tls.certresolver=lets

      # Service (nom = "smitci") pointant sur le port interne 8000
      - traefik.http.services.smitci.loadbalancer.server.port=8000
      - traefik.http.services.smitci.loadbalancer.server.scheme=http

      # Middlewares (doivent exister côté Traefik)
      - traefik.http.routers.smitci.middlewares=sec-headers@docker,compress@docker,ratelimit@docker

  celeryworker:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      celery -A smitci worker
      --loglevel=warning
      --concurrency=1 --autoscale=2,1
      --prefetch-multiplier=1 -Ofair
      --max-tasks-per-child=100
      --without-gossip --without-mingle
    env_file: [.env]
    volumes:
      - .:/smitci-app
    depends_on:
      smitDB:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks: [smitci_network]

  celerybeat:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      celery -A smitci beat
      --loglevel=warning
      --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file: [.env]
    volumes:
      - .:/smitci-app
    depends_on:
      smitDB:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks: [smitci_network]

  smitadminer:
    profiles: ["admin"]
    image: adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: smitDB
    depends_on:
      smitDB:
        condition: service_healthy
    networks: [smitci_network, proxy]
    labels:
      - traefik.enable=false
      - traefik.docker.network=proxy
      - traefik.http.routers.smitadminer.rule=Host(`adminer.smitci.com`)
      - traefik.http.routers.smitadminer.entrypoints=websecure
      - traefik.http.routers.smitadminer.tls.certresolver=lets
      - traefik.http.services.smitadminer.loadbalancer.server.port=8080
      - traefik.http.services.smitadminer.loadbalancer.server.scheme=http
      - traefik.http.routers.smitadminer.middlewares=traefik-auth@docker,sec-headers@docker,compress@docker,ratelimit@docker

#networks:
#  smitci_network:
#    driver: bridge
#  proxy:
#    external: true   # réseau Traefik (uniquement pour smitweb/adminer)
#
#volumes:
#  pgdata:
#  static_volume:
#  media_volume:
#
#services:
#  smitDB:
#    image: postgis/postgis:16-3.4
#    restart: unless-stopped
#    environment:
#      POSTGRES_DB: ${DATABASE_NAME}
#      POSTGRES_USER: ${DATABASE_USER}
#      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
#      PG_DATA: /data
#    volumes:
#      - pgdata:/var/lib/postgresql/data
#    networks: [smitci_network]   # ← plus de proxy ici
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#
#  redis:
#    image: redis:7
#    restart: unless-stopped
#    command: ["redis-server", "--appendonly", "yes", "--appendfsync", "everysec", "--save", "900 1"]
#    networks: [smitci_network]   # ← plus de proxy ici
#    healthcheck:
#      test: ["CMD-SHELL", "redis-cli -h 127.0.0.1 ping | grep PONG >/dev/null 2>&1 || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#
#  smitweb:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: >
#      gunicorn smitci.wsgi:application
#      --bind 0.0.0.0:8000
#      --workers 2 --threads 2
#      --timeout 60
#      --log-level warning
#    env_file: [.env]
#    environment:
#      RUN_MIGRATIONS: "1"
#      RUN_COLLECTSTATIC: "1"
#    volumes:
#      - .:/smitci-app
#      - static_volume:/smitci-app/static
#      - media_volume:/smitci-app/media
#    depends_on:
#      smitDB:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    restart: unless-stopped
#    networks: [smitci_network, proxy]
#    healthcheck:
##      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys\ntry:\n  urllib.request.urlopen('http://127.0.0.1:8000/healthz', timeout=2)\n  sys.exit(0)\nexcept Exception:\n  sys.exit(1)\nPY"]
#      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8000/healthz || exit 1"]
#      interval: 10s
#      timeout: 3s
#      retries: 12
#      start_period: 40s
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=proxy
#      # Router HTTPS
#      - traefik.http.routers.smitci.rule=Host(`smitci.com`)
#      - traefik.http.routers.smitci.entrypoints=websecure
#      - traefik.http.routers.smitci.tls.certresolver=lets
#      - traefik.http.routers.smitci.service=smitci-svc
#      # Service (port interne)
#      - traefik.http.services.smitci.loadbalancer.server.port=8000
#      - traefik.http.services.smitci.loadbalancer.server.scheme=http
#      # Middlewares (doivent exister côté Traefik)
#      - traefik.http.routers.smitci.middlewares=sec-headers@docker,compress@docker,ratelimit@docker
#
#  celeryworker:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: >
#      celery -A smitci worker
#      --loglevel=warning
#      --concurrency=1 --autoscale=2,1
#      --prefetch-multiplier=1 -Ofair
#      --max-tasks-per-child=100
#      --without-gossip --without-mingle
#    env_file: [.env]
#    volumes:
#      - .:/smitci-app
#    depends_on:
#      smitDB:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    restart: unless-stopped
#    networks: [smitci_network]
#
#  celerybeat:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: >
#      celery -A smitci beat
#      --loglevel=warning
#      --scheduler django_celery_beat.schedulers:DatabaseScheduler
#    env_file: [.env]
#    volumes:
#      - .:/smitci-app
#    depends_on:
#      smitDB:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    restart: unless-stopped
#    networks: [smitci_network]
#
#  smitadminer:
#    profiles: ["admin"]   # lancer au besoin
#    image: adminer
#    restart: unless-stopped
#    environment:
#      ADMINER_DEFAULT_SERVER: smitDB
#    depends_on:
#      smitDB:
#        condition: service_healthy
#    networks: [smitci_network, proxy]
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=proxy
#      - traefik.http.routers.smitadminer.rule=Host(`adminer.smitci.com`)
#      - traefik.http.routers.smitadminer.entrypoints=websecure
#      - traefik.http.routers.smitadminer.tls.certresolver=lets
#      - traefik.http.services.smitadminer.loadbalancer.server.port=8080
#      - traefik.http.services.smitadminer.loadbalancer.server.scheme=http
#      - traefik.http.routers.smitadminer.middlewares=traefik-auth@docker,sec-headers@docker,compress@docker,ratelimit@docker
