"""
Django settings for smitci project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import datetime, timedelta
from pathlib import Path
from django.conf import settings
from django.contrib import staticfiles
from django.contrib.auth import logout
from django.shortcuts import redirect
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-toc#mdj)1snmjab-u(nw%25x^u%7f&vix@n7*@$$d^x0fl-!99'
#
# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
#
# ALLOWED_HOSTS = ['https://smitci.com', 'smitci.com', 'www.smitci.com', 'http://smitci.com', '*']
# CSRF_TRUSTED_ORIGINS = ['https://smitci.com', 'http://smitci.com']
# CORS_ALLOWED_ORIGINS = [
#     'https://smitci.com', 'smitci.com', 'www.smitci.com', 'https://smitci.com'
# ]

SECRET_KEY = os.environ.get('SECRET_KEY', 'secret-key')

# Cast manuel de DEBUG (les valeurs des .env sont des chaînes)
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_errors.log'),  # Adjusted path
        },
    },

    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.gis',
    "django.contrib.sites",
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'smit',
    'fontawesomefree',
    'allauth',
    'allauth.account',
    'laboratory',
    'pharmacy',
    'hospitalisation',
    'django_humanize',
    'simple_history',
    'tinymce',
    'django_countries',
    'schedule',
    'dbbackup',
    'django_extensions',
    'django_unicorn',
    'core',
    'import_export',
    'django_filters',
    'guardian',
    'phonenumber_field',
    'django_user_agents',
    'django_tables2',
    'django_prometheus',
    'mathfilters',
    'crispy_forms',
    "crispy_bootstrap5",
    'django_celery_beat',
    'axes',

    # 'django_select2',

]

ASGI_APPLICATION = "smitci.asgi.application"

AUTHENTICATION_BACKENDS = (
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',  # Authentification classique
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    'guardian.backends.ObjectPermissionBackend',  # Backend de permissions Guardian

)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'axes.middleware.AxesMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",
    'simple_history.middleware.HistoryRequestMiddleware',
    'smit.middlewares.SessionTimeoutMiddleware',
    'smit.middlewares.LogForbiddenMiddleware',
    'core.middleware.VisitCounterMiddleware',
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware'

]

ROOT_URLCONF = 'smitci.urls'

BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'templates'],  # ← Chemin corrigé
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                'smit.context_processors.global_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'smitci.wsgi.application'

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'dbbackup/')}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_FORMAT = "E164"

# Tu peux activer ceci si tu veux prolonger la session à chaque requête :
# SESSION_SAVE_EVERY_REQUEST = True  # (optionnel selon besoin)

ACCOUNT_ADAPTER = 'core.account_adapter.NoNewUsersAccountAdapter'
LOGOUT_REDIRECT_URL = 'account_login'
LOGIN_REDIRECT_URL = 'home'

ACCOUNT_LOGIN_METHODS = {'username'}
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Vérification d'e-mail obligatoire
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
# ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
DJANGO_TABLES2_TEMPLATE = "django_tables2/bootstrap4.html"

ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_CHANGE_PASSWORD_REDIRECT_URL = "/accounts/password/change/"
ACCOUNT_RESET_PASSWORD_REDIRECT_URL = "/accounts/password/reset/done/"
#


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

LANGUAGES = [
    ('fr', 'Français'),
    ('en', 'English'),
]

SITE_ID = 1
USE_L10N = True
# USE_THOUSAND_SEPARATOR = True
TINYMCE_JS_URL = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/7/tinymce.min.js'
TINYMCE_COMPRESSOR = False
TINYMCE_DEFAULT_CONFIG = {
    "height": "320px",
    "width": "auto",
    "menubar": "file edit view insert format tools table help",
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
               "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
               "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
               "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
               "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
               "a11ycheck ltr rtl | showcomments addcomment code",
    "custom_undo_redo_levels": 10,
    "language": "es_ES",  # To force a specific language instead of the Django current language.
}
TINYMCE_SPELLCHECKER = True
TINYMCE_EXTRA_MEDIA = {
    'css': {
        'all': [
            ...
        ],
    },
    'js': [
        ...
    ],
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('CACHE_URL'),  # ✅ Maintenant dédié pour le cache
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

CELERY_BROKER_URL = config('CELERY_BROKER_URL')
# CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND')

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Abidjan'
CELERY_BEAT_SCHEDULE = {}

# Concurrence modérée
CELERY_WORKER_CONCURRENCY = 2
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # pas de tempête de re-queue
CELERY_ACKS_LATE = True                # ack après exécution
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Timeouts durs/soft pour tuer les jobs bloqués
CELERY_TASK_SOFT_TIME_LIMIT = 60       # sec
CELERY_TASK_TIME_LIMIT = 75

# Empêcher la fuite mémoire & les zombies
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200
CELERY_WORKER_MAX_MEMORY_PER_CHILD = 200000  # ~200MB

# Retrys bornés + backoff
CELERY_TASK_DEFAULT_RETRY_DELAY = 30   # sec
CELERY_TASK_PUBLISH_RETRY = True
CELERY_TASK_PUBLISH_RETRY_POLICY = {"max_retries": 3}

# Broker visibility timeout (doit > time_limit)
CELERY_BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 120}

# Résultats (optionnel, expire pour éviter gonflement)
CELERY_RESULT_EXPIRES = 3600  # 1h
# Beat: évite le polling agressif
CELERY_BEAT_MAX_LOOP_INTERVAL = 60  # 30–120s selon ton besoin

# Événements et résultats inutiles = CPU/IO en moins
CELERY_SEND_EVENTS = False
task_send_sent_event = False
task_ignore_result = True
CELERY_RESULT_BACKEND = None

# Prefetch calme les pics
worker_prefetch_multiplier = 1
task_acks_late = True

# Connexions broker plus sages
broker_pool_limit = 5
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

SCHEDULER_ADMIN = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# BOWER_COMPONENTS_ROOT = os.path.join(BASE_DIR, 'components')

STATICFILES_DIRS = [BASE_DIR.parent / 'static']
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
WHITENOISE_MAX_AGE = int(os.getenv("WHITENOISE_MAX_AGE", 60 * 60 * 24 * 30))  # 30j
WHITENOISE_USE_FINDERS = os.getenv("WHITENOISE_USE_FINDERS", "False") == "True"
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
HANDLER403 = 'core.views.custom_403_view'

# Configuration de l'e-mail via fichier .env
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "True") == "True"
EMAIL_USE_SSL = os.environ.get("EMAIL_USE_SSL", "False") == "True"
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)

TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.environ.get('messaging_service_sid')  # Numéro Twilio
TWILIO_MESSAGING_SERVICE_SID = os.environ.get('TWILIO_MESSAGING_SERVICE_SID')
SITE_NAME = 'SMIT-CI'

ORANGE_TOKEN_URL = config("ORANGE_TOKEN_URL", default="https://api.orange.com/oauth/v3/token")
ORANGE_SMS_URL = config("ORANGE_SMS_URL", default="https://api.orange.com/smsmessaging/v1/outbound/{}/requests")
ORANGE_SMS_CLIENT_ID = config('ORANGE_SMS_CLIENT_ID')
ORANGE_SMS_CLIENT_SECRET = config('ORANGE_SMS_CLIENT_SECRET')
ORANGE_SMS_SENDER = config('ORANGE_SMS_SENDER')

# ==== META WHATSAPP CLOUD API ====
META_WA_API_VERSION = config("META_WA_API_VERSION", default="v20.0")
META_WA_BASE_URL = config("META_WA_BASE_URL", default="https://graph.facebook.com")
META_WA_PHONE_NUMBER_ID = config("META_WA_PHONE_NUMBER_ID")  # ex: "123456789012345"
META_WA_ACCESS_TOKEN = config("META_WA_ACCESS_TOKEN")  # token long-lived
